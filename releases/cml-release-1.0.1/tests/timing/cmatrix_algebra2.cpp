/* -*- C++ -*- ------------------------------------------------------------
 @@COPYRIGHT@@
 *-----------------------------------------------------------------------*/
/** @file
 *  @brief
 */

void mul(matrix_d44 res, const matrix_d44 A, const matrix_d44 B)
{
#if 1
    for(int row = 0; row < 4; ++row) {
	for(int col = 0; col < 4; ++col) {
#if 1
	    double sum = A[row][0]*B[0][col];
	    for(int k = 1; k < 4; ++k) {
		sum += A[row][k]*B[k][col];
	    }
	    res[row][col] = sum;
#else
            res[row][col] =
                  A[row][0]*B[0][col]
                + A[row][1]*B[1][col]
                + A[row][2]*B[2][col]
                + A[row][3]*B[3][col];
#endif
	}
    }
#endif

#if 0
#if 0
        res[0][0]  = A[0][0]*B[0][0];
        res[0][0] += A[0][1]*B[1][0];
        res[0][0] += A[0][2]*B[2][0];
        res[0][0] += A[0][3]*B[3][0];

        res[0][1]  = A[0][0]*B[0][1];
        res[0][1] += A[0][1]*B[1][1];
        res[0][1] += A[0][2]*B[2][1];
        res[0][1] += A[0][3]*B[3][1];

        res[0][2]  = A[0][0]*B[0][2];
        res[0][2] += A[0][1]*B[1][2];
        res[0][2] += A[0][2]*B[2][2];
        res[0][2] += A[0][3]*B[3][2];

        res[0][3]  = A[0][0]*B[0][3];
        res[0][3] += A[0][1]*B[1][3];
        res[0][3] += A[0][2]*B[2][3];
        res[0][3] += A[0][3]*B[3][3];

        res[1][0]  = A[1][0]*B[0][0];
        res[1][0] += A[1][1]*B[1][0];
        res[1][0] += A[1][2]*B[2][0];
        res[1][0] += A[1][3]*B[3][0];

        res[1][1]  = A[1][0]*B[0][1];
        res[1][1] += A[1][1]*B[1][1];
        res[1][1] += A[1][2]*B[2][1];
        res[1][1] += A[1][3]*B[3][1];

        res[1][2]  = A[1][0]*B[0][2];
        res[1][2] += A[1][1]*B[1][2];
        res[1][2] += A[1][2]*B[2][2];
        res[1][2] += A[1][3]*B[3][2];

        res[1][3]  = A[1][0]*B[0][3];
        res[1][3] += A[1][1]*B[1][3];
        res[1][3] += A[1][2]*B[2][3];
        res[1][3] += A[1][3]*B[3][3];

        res[2][0]  = A[2][0]*B[0][0];
        res[2][0] += A[2][1]*B[1][0];
        res[2][0] += A[2][2]*B[2][0];
        res[2][0] += A[2][3]*B[3][0];

        res[2][1]  = A[2][0]*B[0][1];
        res[2][1] += A[2][1]*B[1][1];
        res[2][1] += A[2][2]*B[2][1];
        res[2][1] += A[2][3]*B[3][1];

        res[2][2]  = A[2][0]*B[0][2];
        res[2][2] += A[2][1]*B[1][2];
        res[2][2] += A[2][2]*B[2][2];
        res[2][2] += A[2][3]*B[3][2];

        res[2][3]  = A[2][0]*B[0][3];
        res[2][3] += A[2][1]*B[1][3];
        res[2][3] += A[2][2]*B[2][3];
        res[2][3] += A[2][3]*B[3][3];

        res[3][0]  = A[3][0]*B[0][0];
        res[3][0] += A[3][1]*B[1][0];
        res[3][0] += A[3][2]*B[2][0];
        res[3][0] += A[3][3]*B[3][0];

        res[3][1]  = A[3][0]*B[0][1];
        res[3][1] += A[3][1]*B[1][1];
        res[3][1] += A[3][2]*B[2][1];
        res[3][1] += A[3][3]*B[3][1];

        res[3][2]  = A[3][0]*B[0][2];
        res[3][2] += A[3][1]*B[1][2];
        res[3][2] += A[3][2]*B[2][2];
        res[3][2] += A[3][3]*B[3][2];

        res[3][3]  = A[3][0]*B[0][3];
        res[3][3] += A[3][1]*B[1][3];
        res[3][3] += A[3][2]*B[2][3];
        res[3][3] += A[3][3]*B[3][3];
#else
    double sum;

    sum  = A[0][0]*B[0][0]
         + A[0][1]*B[1][0]
         + A[0][2]*B[2][0]
         + A[0][3]*B[3][0];
    res[0][0] = sum;

    sum  = A[0][0]*B[0][1]
         + A[0][1]*B[1][1]
         + A[0][2]*B[2][1]
         + A[0][3]*B[3][1];
    res[0][1] = sum;

    sum  = A[0][0]*B[0][2]
         + A[0][1]*B[1][2]
         + A[0][2]*B[2][2]
         + A[0][3]*B[3][2];
    res[0][2] = sum;

    sum  = A[0][0]*B[0][3]
         + A[0][1]*B[1][3]
         + A[0][2]*B[2][3]
         + A[0][3]*B[3][3];
    res[0][3] = sum;


    sum  = A[1][0]*B[0][0]
         + A[1][1]*B[1][0]
         + A[1][2]*B[2][0]
         + A[1][3]*B[3][0];
    res[1][0] = sum;

    sum  = A[1][0]*B[0][1]
         + A[1][1]*B[1][1]
         + A[1][2]*B[2][1]
         + A[1][3]*B[3][1];
    res[1][1] = sum;

    sum  = A[1][0]*B[0][2]
         + A[1][1]*B[1][2]
         + A[1][2]*B[2][2]
         + A[1][3]*B[3][2];
    res[1][2] = sum;

    sum  = A[1][0]*B[0][3]
         + A[1][1]*B[1][3]
         + A[1][2]*B[2][3]
         + A[1][3]*B[3][3];
    res[1][3] = sum;


    sum  = A[2][0]*B[0][0]
         + A[2][1]*B[1][0]
         + A[2][2]*B[2][0]
         + A[2][3]*B[3][0];
    res[2][0] = sum;

    sum  = A[2][0]*B[0][1]
         + A[2][1]*B[1][1]
         + A[2][2]*B[2][1]
         + A[2][3]*B[3][1];
    res[2][1] = sum;

    sum  = A[2][0]*B[0][2]
         + A[2][1]*B[1][2]
         + A[2][2]*B[2][2]
         + A[2][3]*B[3][2];
    res[2][2] = sum;

    sum  = A[2][0]*B[0][3]
         + A[2][1]*B[1][3]
         + A[2][2]*B[2][3]
         + A[2][3]*B[3][3];
    res[2][3] = sum;


    sum  = A[3][0]*B[0][0]
         + A[3][1]*B[1][0]
         + A[3][2]*B[2][0]
         + A[3][3]*B[3][0];
    res[3][0] = sum;

    sum  = A[3][0]*B[0][1]
         + A[3][1]*B[1][1]
         + A[3][2]*B[2][1]
         + A[3][3]*B[3][1];
    res[3][1] = sum;

    sum  = A[3][0]*B[0][2]
         + A[3][1]*B[1][2]
         + A[3][2]*B[2][2]
         + A[3][3]*B[3][2];
    res[3][2] = sum;

    sum  = A[3][0]*B[0][3]
         + A[3][1]*B[1][3]
         + A[3][2]*B[2][3]
         + A[3][3]*B[3][3];
    res[3][3] = sum;
#endif
#endif
}

/* The args should *not* be references: */
void timed2(
        matrix_d44 m,
        const matrix_d44 m1,
        const matrix_d44 m2,
        const matrix_d44 m3,
        size_t n_iter
        )
{
    matrix_d44 tmp, tmp2; 
    m[0][0] = 1.; m[0][1] = 0.; m[0][2] = 0.; m[0][3] = 0.;
    m[1][0] = 0.; m[1][1] = 1.; m[1][2] = 0.; m[1][3] = 0.;
    m[2][0] = 0.; m[2][1] = 0.; m[2][2] = 1.; m[2][3] = 0.;
    m[3][0] = 0.; m[3][1] = 0.; m[3][2] = 0.; m[3][3] = 1.;
    for(int i = 0; i < n_iter; ++i) {
        /* m = m1*m2*m3 */
#if 1
        mul(tmp,m,m1);
        mul(m,tmp,m2);
#endif
#if 0
        mul(m,m1,m2);
#endif
    }
}

// -------------------------------------------------------------------------
// vim:ft=cpp
